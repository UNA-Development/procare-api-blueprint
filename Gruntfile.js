var exec = require('child_process').exec;

module.exports = function(grunt) {

  grunt.initConfig({
    concat: {
      options: {
        separator: grunt.util.linefeed,
      },
      blueprint: {
        src: ['parts/*.md'],
        filter: 'isFile',
        dest: 'blueprint.md',
      },
    },
    shell: {
      docs: {
        command: function() {
          var port = grunt.option('p') || '3002';
          var templateFile = grunt.option('t') || 'templates/flatly-multi.jade';
          var inputFile = grunt.option('i') || './blueprint.md';
          if (inputFile == './blueprint.md') {
            console.log('Merging blueprint...');
            grunt.task.run('concat:blueprint');
            inputFile = './blueprint.md';
          }
          return 'aglio -t ' + templateFile + ' -i ' + inputFile + ' -s' + ' -p ' + port;
        },
        options: {
          stdout: true,
          stderr: true
        }
      },
      mock: {
        command: function() {
          var port = grunt.option('p') || '3001';
          var inputFile = grunt.option('i') || './blueprint.md';
          if (inputFile == './blueprint.md') {
            console.log('Merging blueprint...');
            grunt.task.run('concat:blueprint');
            inputFile = './blueprint.md';
          }
          return './node_modules/api-mock/bin/api-mock ' + inputFile + ' -p ' + port;
        },
        options: {
          stdout: true,
          stderr: true
        }
      },
      test: {
        command: function() {
          var endpoint = grunt.option('e') || 'https://api.procarerx.com/';
          var inputFile = grunt.option('i') || './blueprint.md';
          if (inputFile == './blueprint.md') {
            console.log('Merging blueprint...');
            grunt.task.run('concat:blueprint');
            inputFile = './blueprint.md';
          }
          return './node_modules/dredd/bin/dredd ' + inputFile + ' ' + endpoint + ' --sorted'  +
                '-h Accept:application/json -h X-Internal-Key:$INTERNAL_KEY -h X-Api-Key:$API_KEY --hookfiles=./hooks/*_hooks.coffee';
        },
        options: {
          stdout: true,
          stderr: true
        }
      }
    }
  });

  grunt.loadNpmTasks('grunt-shell');
  grunt.loadNpmTasks('grunt-contrib-concat');

  grunt.registerTask('docs', 'Launch the documentation server.', ['shell:docs']);
  grunt.registerTask('mock', 'Launch a mock server generated by the blueprint.', ['shell:mock']);
  grunt.registerTask('test', 'Run automated tests against the API.', ['shell:test']);
  grunt.registerTask('merge', 'Merge the parts of the api together.', ['concat:blueprint']);
  grunt.registerTask('default', ['docs']);

};
